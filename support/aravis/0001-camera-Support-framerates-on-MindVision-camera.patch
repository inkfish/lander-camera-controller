From 63250bdc4a374dc0320559be94019131481ffaef Mon Sep 17 00:00:00 2001
From: Ryan Govostes <ryan@ink.fish>
Date: Mon, 15 May 2023 05:57:58 +0000
Subject: [PATCH 1/2] camera: Support framerates on MindVision camera

---
 src/arvcamera.c | 69 +++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 67 insertions(+), 2 deletions(-)

diff --git a/src/arvcamera.c b/src/arvcamera.c
index 82c4ab73..d76b9ffe 100644
--- a/src/arvcamera.c
+++ b/src/arvcamera.c
@@ -64,6 +64,7 @@ static void arv_camera_get_integer_bounds_as_double (ArvCamera *camera, const ch
  * @ARV_CAMERA_VENDOR_XIMEA: XIMEA GmbH
  * @ARV_CAMERA_VENDOR_MATRIX_VISION: Matrix Vision GmbH
  * @ARV_CAMERA_VENDOR_IMPERX: Imperx, Inc
+ * @ARV_CAMERA_VENDOR_MINDVISION: MindVision
  */
 
 typedef enum {
@@ -76,7 +77,8 @@ typedef enum {
 	ARV_CAMERA_VENDOR_RICOH,
 	ARV_CAMERA_VENDOR_XIMEA,
 	ARV_CAMERA_VENDOR_MATRIX_VISION,
-	ARV_CAMERA_VENDOR_IMPERX
+	ARV_CAMERA_VENDOR_IMPERX,
+	ARV_CAMERA_VENDOR_MINDVISION
 } ArvCameraVendor;
 
 typedef enum {
@@ -92,7 +94,8 @@ typedef enum {
 	ARV_CAMERA_SERIES_XIMEA,
 	ARV_CAMERA_SERIES_MATRIX_VISION,
 	ARV_CAMERA_SERIES_IMPERX_CHEETAH,
-	ARV_CAMERA_SERIES_IMPERX_OTHER
+	ARV_CAMERA_SERIES_IMPERX_OTHER,
+	ARV_CAMERA_SERIES_MINDVISION
 } ArvCameraSeries;
 
 typedef struct {
@@ -1109,6 +1112,18 @@ arv_camera_set_frame_rate (ArvCamera *camera, double frame_rate, GError **error)
 			}
 
 			break;
+		case ARV_CAMERA_VENDOR_MINDVISION:
+			/*
+			There are two framerate fields:
+				AcquisitionFrameRate - enum { Low, Mid, High, Super }
+				AcquisitionFrameRateAbs - integer
+
+			The actual FPS values for the former are not documented.
+			*/
+			arv_camera_set_frame_rate_enable(camera, TRUE, &local_error);
+			if (local_error == NULL)
+				arv_camera_set_integer (camera, "AcquisitionFrameRateAbs", (gint64)frame_rate, &local_error);
+			break;
 		case ARV_CAMERA_VENDOR_DALSA:
 		case ARV_CAMERA_VENDOR_RICOH:
 		case ARV_CAMERA_VENDOR_XIMEA:
@@ -1141,6 +1156,7 @@ arv_camera_set_frame_rate (ArvCamera *camera, double frame_rate, GError **error)
 double
 arv_camera_get_frame_rate (ArvCamera *camera, GError **error)
 {
+	GError *local_error = NULL;
 	ArvCameraPrivate *priv = arv_camera_get_instance_private (camera);
 	ArvGcNode *feature;
 
@@ -1164,6 +1180,39 @@ arv_camera_get_frame_rate (ArvCamera *camera, GError **error)
 				} else
 					return arv_camera_get_float (camera, "FPS", error);
 			}
+		case ARV_CAMERA_VENDOR_MINDVISION:
+			{
+				gboolean is_abs_rate;
+				const char *enum_value;
+
+				is_abs_rate = arv_camera_get_boolean (camera, "AcquisitionFrameRateEnable", error);
+				if (error != NULL)
+					return 0;
+
+				if (is_abs_rate)
+					return arv_camera_get_integer (camera, "AcquisitionFrameRateAbs", error);
+
+				/* Vendor uses enum values { Low, Mid, High, Super } */
+				enum_value = arv_camera_get_string (camera, "AcquisitionFrameRate", error);
+				if (error != NULL)
+					return 0;
+
+				if (g_strcmp0 (enum_value, "Low") == 0)
+					return 4.0;  // TODO: What is it?
+				else if (g_strcmp0 (enum_value, "Low") == 0)
+					return 12.0;  // TODO: What is it?
+				else if (g_strcmp0 (enum_value, "High") == 0)
+					return 18.0;  // TODO: What is it?
+				else if (g_strcmp0 (enum_value, "Super") == 0)
+					return 24.0;  // TODO: What is it?
+				else
+				{
+					local_error = g_error_new (ARV_DEVICE_ERROR, ARV_DEVICE_ERROR_INVALID_PARAMETER,
+												"Unknown value for AcquisitionFrameRate");
+					g_propagate_error (error, local_error);
+					return 0;
+				}
+			}
 		case ARV_CAMERA_VENDOR_POINT_GREY_FLIR:
 		case ARV_CAMERA_VENDOR_DALSA:
 		case ARV_CAMERA_VENDOR_RICOH:
@@ -1242,6 +1291,17 @@ arv_camera_get_frame_rate_bounds (ArvCamera *camera, double *min, double *max, G
 		case ARV_CAMERA_VENDOR_PROSILICA:
 			arv_camera_get_float_bounds (camera, "AcquisitionFrameRateAbs", min, max, error);
 			break;
+		case ARV_CAMERA_VENDOR_MINDVISION:
+			{
+				gint64 intmin, intmax;
+				arv_camera_get_integer_bounds (camera,
+					"AcquisitionFrameRateAbs", &intmin, &intmax, error);
+				if (error == NULL) {
+					*min = (float)intmin;
+					*max = (float)intmax;
+				}
+				break;
+			}
 		case ARV_CAMERA_VENDOR_POINT_GREY_FLIR:
 		case ARV_CAMERA_VENDOR_DALSA:
 		case ARV_CAMERA_VENDOR_RICOH:
@@ -2271,6 +2331,8 @@ arv_camera_is_frame_rate_available (ArvCamera *camera, GError **error)
 			return arv_camera_is_feature_available (camera, "AcquisitionFrameRateAbs", error);
 		case ARV_CAMERA_VENDOR_TIS:
 			return arv_camera_is_feature_available (camera, "FPS", error);
+		case ARV_CAMERA_VENDOR_MINDVISION:
+			return FALSE;
 		case ARV_CAMERA_VENDOR_POINT_GREY_FLIR:
 		case ARV_CAMERA_VENDOR_DALSA:
 		case ARV_CAMERA_VENDOR_RICOH:
@@ -4058,6 +4120,9 @@ arv_camera_constructed (GObject *object)
 	} else if (g_strcmp0 (vendor_name, "MATRIX VISION GmbH") == 0) {
 		vendor = ARV_CAMERA_VENDOR_MATRIX_VISION;
 		series = ARV_CAMERA_SERIES_MATRIX_VISION;
+	} else if (g_strcmp0 (vendor_name, "MindVision") == 0) {
+		vendor = ARV_CAMERA_VENDOR_MINDVISION;
+		series = ARV_CAMERA_SERIES_MINDVISION;
 	} else if (g_strcmp0 (vendor_name, "Imperx, Inc") == 0) {
 		vendor = ARV_CAMERA_VENDOR_IMPERX;
 		if (g_str_has_prefix (model_name, "POE-C"))
-- 
2.34.1

